c
Talk.all
n
c
Talk.all
talks
n
c
talk
n
start_time
n
talk
c
exit}
talks.sort{|k| k.order}
talks
talk
c
talks
c
exit
tracks = get_tracks(time_limit)
first_track
n
first_track.empty?
nil.empty?
first_track
c
first_track
c
first_track
c
first_track
c
n
first_track
c
q
@talks.reject { |e| e.to_s.empty? || !e.tracked?}
@talks.reject { |e| e.to_s.empty? || e.tracked?}
[false, false, false, false, false, false, true].reject{|i| i}
[false, false, false, false, false, false, true].reject{|i| !i}
@talks.reject { |e| e.to_s.empty? && !e.tracked?}
[false, false, false, false, false, false, false].reject{|i| !i}
[false, false, false, false, false, false, false].reject{|i| i}
@talks.map { |e| e if !e.tracked?}
@talks.map { |e| e !e.tracked?}
@talks.map { |e| e if (e.to_s.empty? && !e.tracked?)}
@talks.map { |e| e (e.to_s.empty? && !e.tracked?)}
@talks.map { |e| e.to_s.empty? && !e.tracked?}
@talks.map{|t| t.tracked}
@talks[0].tracked
@talks[0]
@talks.reject { |e| e.to_s.empty? && e.tracked?}
@talks.reject { |e| e.to_s.empty? && !e.tracked?}
@talks.reject { |e| e.to_s.empty? && e.tracked?}@talks.reject { |e| e.to_s.empty? && !e.tracked?}
@talks
@talks.map { |e| !e.to_s.empty? && e.tracked?}
@talks.reject { |e| e.to_s.empty? && !e.tracked?}
@talks.map { |e| e.to_s.empty? && e.tracked?}
tracked_talks
q
@talks.reject { |e| e.to_s.empty? && !e.tracked?}
tracked_talks
exit
@talks.reject { |e| (e.to_s.empty? && !e.untracked?)}
@talks.reject { |e| !(e.to_s.empty? && !e.untracked?)}
@talks.reject { |e| !(e.to_s.empty? && e.untracked?)}
@talks.reject { |e| e.to_s.empty? && e.untracked?}
@talks.reject { |e| e.to_s.empty? && e.order != -1}
@talks.reject { |e| e.to_s.empty? && e.order == -1}
@talks.reject { |e| e.to_s.empty? && e.untracked?}
@talks.reject { |e| e.to_s.empty? && !e.untracked?}
tracked_talks
tracked_talks.count
exit
[nil, 1].reject { |e| e.to_s.empty? }
[nil, 1]..reject { |e| e.to_s.empty? }
[nil, 1].compact
self.untracked_talks
self.untracked_talks.map{|talk| talk.time_limit}
c
talk_timings
n
self.untracked_talks
c
n
talk_timings
c
n
self.untracked_talks.map{|talk| talk.time_limit}
self.untracked_talks
q
c
tracks
n
talk
